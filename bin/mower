#!/usr/bin/python3
import sys,os
import curses
import time
import datetime
import configparser
import requests
import json


import RPi.GPIO as GPIO
import atexit
import Adafruit_GPIO.SPI as SPI
import Adafruit_MCP3008
from numpy import median
from collections import deque
import mowerfunctions
from random import *
import syslog

import mowersensors

LedPin = 18    # pin18
GPIO.setup(LedPin, GPIO.OUT)   # Set LedPin's mode is output
GPIO.setup(27, GPIO.IN, pull_up_down = GPIO.PUD_UP)   # pushbutton

GPIO.setup(17, GPIO.IN, pull_up_down = GPIO.PUD_UP)   # 12 volt charger detection


def draw_menu(stdscr):

    mbdebug = "debug"
    LEFT_TRIM   = -8
    RIGHT_TRIM  = 0
    ledblinktoggler = False
    global robot
    robot = mowerfunctions.Robot(left_trim=LEFT_TRIM, right_trim=RIGHT_TRIM)

    sensors = mowersensors.Sensorread()

    def amtoggle(channel):
      syslog.syslog("Liam-on-RPi: LED button pressed")
      global butt
      global robotstate
      if (butt == 0): butt = ord('a')
      if (butt == -1): butt = ord('m')

    GPIO.add_event_detect(27, GPIO.RISING, callback=amtoggle, bouncetime=300)

    ##

    k = 0
    prevk = 0
    cursor_x = 0
    cursor_y = 0
    global butt
    butt = 0

    ## read config
    config = configparser.ConfigParser()
    config.read("../mower.conf")

    global forwardspeed
    global lowbackwardspeed
    global mediumbackwardspeed
    global highbackwardspeed
    global cutterdiscspeed
    global obstacletrigger
    global obstacletriggerbwffollow
    global cutterdisctrigger


    forwardspeed = int(config['mower']['forwardspeed'])
    lowbackwardspeed = int(config['mower']['lowbackwardspeed'])
    mediumbackwardspeed = int(config['mower']['mediumbackwardspeed'])
    highbackwardspeed = int(config['mower']['highbackwardspeed'])
    cutterdiscspeed = int(config['mower']['cutterdiscspeed'])
    obstacletrigger = int(config['mower']['obstacletrigger'])
    obstacletriggerbwffollow = int(config['mower']['obstacletriggerbwffollow'])
    cutterdisctrigger = int(config['mower']['cutterdisctrigger'])



    # Clear and refresh the screen for a blank canvas
    stdscr.clear()
    stdscr.refresh()
    stdscr.idcok(False)
    stdscr.idlok(False)

    # Start colors in curses
    curses.start_color()
    curses.init_pair(1, curses.COLOR_CYAN, curses.COLOR_BLACK)
    curses.init_pair(2, curses.COLOR_RED, curses.COLOR_BLACK)
    curses.init_pair(3, curses.COLOR_BLACK, curses.COLOR_WHITE)

    curtime = time.time()
    polltimer = time.time()
    whstr = "dummy"
    lapcounter = 0
    robotstate = "pause"
    prevjsonaction = "dummy"

    stdscr.nodelay(True)
    syslog.syslog("Liam-on-RPi: entering loop")

    # Loop where k is the last character pressed
    while (k != ord('q')):

        # Poll server for desired action then and then as we say in swedish
        if (time.time() - polltimer > 60):
            syslog.syslog("Liam-on-RPi: polltimer reached " + str(time.time() - polltimer))
            r = requests.get('http://192.168.4.37/mower/?u=action')
            daataa = json.loads(r.text)
            jsonaction = daataa["action"][0]
            syslog.syslog("Liam-on-RPi: action from JSON: " + jsonaction)
            if (prevjsonaction != jsonaction):
               if (jsonaction == "auto"): butt = ord('a')
               if (jsonaction == "halt"): butt = ord('m')
               if (jsonaction == "sleep"): butt = ord('c')
               prevjsonaction = jsonaction
            polltimer = time.time()

            chargerconnected = GPIO.input(17)
            if (chargerconnected == 0) and (jsonaction == "auto"):
              syslog.syslog("Liam-on-RPi: charger pin is 0 and we are charging")
              if (voltage >= 14.2):
                syslog.syslog("Liam-on-RPi: charging done, lousy calculated voltage is " + str(voltage))
                robot.backward(135, 5.5)
                robot.stop()
                time.sleep(0.3)
                robot.right(135, 1.6)
                robot.forward(135, 3.5)
                butt = ord('a')

              syslog.syslog("Liam-on-RPi: lousy calculated voltage is " + str(voltage))



        # A short sleep to lower CPU load and hopefully save some power
        time.sleep(.1)

        voltage = round(sensors.readvoltage(),2)
        bwfcount = sensors.readcoils()
        wheelload = sensors.readmotorcurrent()
        cutterload = sensors.readcuttercurrent()

        # Initialization
        #stdscr.clear()
        height, width = stdscr.getmaxyx()

        cursor_x = max(0, cursor_x)
        cursor_x = min(width-1, cursor_x)

        cursor_y = max(0, cursor_y)
        cursor_y = min(height-1, cursor_y)

        # Declaration of strings
        title = "Curses example"[:width-1]
        subtitle = "Written by Clay McLeod"[:width-1]
        keystr = "Last key pressed: {}".format(k)[:width-1]
        statusbarstr = "Press 'q' to exit | STATUS BAR | Pos: {}, {}".format(cursor_x, cursor_y)
        if k == 0:
            keystr = "No key press detected..."[:width-1]

        if (k == ord('m')):
            robot.stop()
            robot.cutterstop()
            k = 0
            robotstate = "pause"

        if (k == ord('a')) or (robotstate == "recovering") or (robotstate == "running"):
            sensorcheck = "allok"
            if (bwfcount[0] > 15):
                sensorcheck = "escaperight"
                mbdebug = "escaperight"
                syslog.syslog("Liam-on-RPi: " + sensorcheck + " BWFleft = " + str(bwfcount[0]) + " (BWFright = " + str(bwfcount[1]) + ")")
                rresult = sensors.escapehitleftcoil()
                mbdebug = rresult
                robotstate = "recovering"
                bwfcount = sensors.readcoils()

            if (bwfcount[1] > 15):
                sensorcheck = "escapeleft"
                mbdebug = "escapeleft"
                syslog.syslog("Liam-on-RPi: " + sensorcheck + " BWFright = " + str(bwfcount[1]) + " (BWFleft = " + str(bwfcount[0]) + ")")
                rresult = sensors.escapehitrightcoil()
                mbdebug = rresult
                robotstate = "recovering"
                bwfcount = sensors.readcoils()

            if (wheelload > obstacletrigger):
                a = int(random() + 0.5)
                if (a == 0):
                  sensorcheck = "escaperight"
                  mbdebug = "overload escaperight"
                  rresult = sensors.escapehitleftcoil()
                  mbdebug = rresult
                else:
                  sensorcheck = "escapeleft"
                  mbdebug = "overload escapeleft"
                  rresult = sensors.escapehitrightcoil()
                  mbdebug = rresult
                syslog.syslog("Liam-on-RPi: wheel load " + str(wheelload) + ", random a = " + str(a))
                robotstate = "recovering"
                wheelload = sensors.readmotorcurrent()
                wheelload = sensors.readmotorcurrent()
                wheelload = sensors.readmotorcurrent()

            if (sensorcheck == "allok" and robotstate != "running"):
                robot.cutterforward(cutterdiscspeed)
                robot.forward(forwardspeed)
                robotstate = "running"
                GPIO.output(LedPin, GPIO.HIGH) # led on

        if (k == ord('c')) or (robotstate == "bwfrecovering") or (robotstate == "bwfsearching"):
            syslog.syslog("Liam-on-RPi: entering BWF find top")
            robot.cutterstop()
            sensorcheck = "allok"
            #if (robotstate != "bwfrecovering"): robotstate = "bwfsearching"
            if (bwfcount[0] > 15) and (bwfcount[1] > 15):
                syslog.syslog("Liam-on-RPi: " + sensorcheck + " (BWF finder) BWFleft = " + str(bwfcount[0]) + " (BWFright = " + str(bwfcount[1]) + ")")
                robotstate = "linefollow"
                inneraction = "placecoilsbetweenbwf"
                bwfcount = sensors.readcoils()
                robot.stop()
                time.sleep(0.3)
                k = 0
                syslog.syslog("Liam-on-RPi: " +  "(BWF finder) stopping")

            if (wheelload > obstacletrigger):
                syslog.syslog("Liam-on-RPi: entering BWF find wheelload " + str(wheelload))
                a = int(random() + 0.5)
                if (a == 0):
                  sensorcheck = "escaperight"
                  mbdebug = "overload escaperight"
                  rresult = sensors.escapehitleftcoil()
                  mbdebug = rresult
                else:
                  sensorcheck = "escapeleft"
                  mbdebug = "overload escapeleft"
                  rresult = sensors.escapehitrightcoil()
                  mbdebug = rresult
                syslog.syslog("Liam-on-RPi: wheel load " + str(wheelload) + ", random a = " + str(a))
                robotstate = "bwfrecovering"
                wheelload = sensors.readmotorcurrent()
                wheelload = sensors.readmotorcurrent()
                wheelload = sensors.readmotorcurrent()

            if (sensorcheck == "allok" and robotstate != "bwfsearching" and robotstate != "linefollow"):
                robot.forward(forwardspeed)
                robotstate = "bwfsearching"
                GPIO.output(LedPin, GPIO.HIGH) # led on
                syslog.syslog("Liam-on-RPi: entering BWF find: running forward")

        if (robotstate == "linefollow"):
            innercoil = bwfcount[1]
            outercoil = bwfcount[0]
            chargerconnected = GPIO.input(17)
            if (chargerconnected == 0):
              syslog.syslog("Liam-on-RPi: charger pin is 0")
              robot.stop()
              k = 0
              robotstate = "pause"
              inneraction = "charge"
            if (inneraction == "placecoilsbetweenbwf"): syslog.syslog("Liam-on-RPi: entering linefollow")
            sensorcheck = "allok"
            if (inneraction == "placecoilsbetweenbwf"): robot.right(100)
            if (7 < innercoil < 15) and (outercoil > 15) and (inneraction == "placecoilsbetweenbwf"):
                robot.stop()
                time.sleep(0.3)
                #k = 0
                #robotstate = "pause"
                inneraction = "runalongbwf"
                syslog.syslog("Liam-on-RPi: coils between BWF, inner = " + str(innercoil) + " outer = " + str(outercoil))


            if (inneraction == "runalongbwf"):
                robot.forward(155)
                if (7 < outercoil < 15):
                  robot.stop()
                  inneraction = "adjustleft"
                  syslog.syslog("Liam-on-RPi: OUTER coil inside bwf")

                if (innercoil > 15):
                  robot.stop()
                  inneraction = "adjustright"
                  syslog.syslog("Liam-on-RPi: inner coil OUTSIDE bwf")

            if (inneraction == "adjustleft"):
                  syslog.syslog("Liam-on-RPi: entering adjustleft")
                  robot.left(100)
                  if (7 < innercoil < 15) and (outercoil > 15):
                    robot.stop()
                    time.sleep(0.3)
                    inneraction = "runalongbwf"
                    syslog.syslog("Liam-on-RPi: LMartin cant code, coils between BWF, inner = " + str(innercoil) + " outer = " + str(outercoil))

            if (inneraction == "adjustright"):
                  syslog.syslog("Liam-on-RPi: entering adjustright")
                  robot.right(100)
                  if (7 < innercoil < 15) and (outercoil > 15):
                    robot.stop()
                    time.sleep(0.3)
                    inneraction = "runalongbwf"
                    syslog.syslog("Liam-on-RPi: RMartin cant code, coils between BWF, inner = " + str(innercoil) + " outer = " + str(outercoil))

            wheelload = sensors.readmotorcurrent()
            if (wheelload > obstacletriggerbwffollow) and (robotstate != "pause"):
                syslog.syslog("Liam-on-RPi: Linefollow wheel load " + str(wheelload) + ", random a = ")
                sensorcheck = "escapelinefollow"
                mbdebug = "overload escapelinefollow"
                rresult = sensors.escapelinefollow()
                mbdebug = rresult
                robotstate = "bwfrecovering"
                wheelload = sensors.readmotorcurrent()
                wheelload = sensors.readmotorcurrent()
                wheelload = sensors.readmotorcurrent()

        # Rendering some text
        timetick = time.time() - curtime
        if (timetick >= 1):
          #stdscr.clear()
          #stdscr.erase()
          whstr = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(time.time())) + " " + str(lapcounter) + " laps                 "
          curtime = time.time()
          lapcounter = 0
          stdscr.addstr(0, 0, whstr + "                       ", curses.color_pair(1))
          stdscr.addstr(1, 0, str(voltage) + " volts                  ", curses.color_pair(1))
          stdscr.addstr(2, 0, str(bwfcount[0]) + " " + str(bwfcount[1]) + " " + str(bwfcount[2]) + " hits                  ", curses.color_pair(1))
          stdscr.addstr(3, 0, str(wheelload) + " wheel load                  ", curses.color_pair(1))
          stdscr.addstr(4, 0, str(cutterload) + " cutter load                  ", curses.color_pair(1))
          stdscr.addstr(5, 0, mbdebug + "                       ", curses.color_pair(1))
          stdscr.refresh()
          if (robotstate != "running"):
              if ledblinktoggler:
                  GPIO.output(LedPin, GPIO.LOW) # led off
                  ledblinktoggler = False
              else:
                  GPIO.output(LedPin, GPIO.HIGH) # led on
                  ledblinktoggler = True

          if (robotstate == "running"):
            if (voltage < 13.0): butt = ord('c')

        # Render status bar
        stdscr.attron(curses.color_pair(3))
        stdscr.addstr(height-1, 0, statusbarstr)
        stdscr.addstr(height-1, len(statusbarstr), " " * (width - len(statusbarstr) - 1))
        stdscr.attroff(curses.color_pair(3))

        # Turning on attributes for title
        stdscr.attron(curses.color_pair(2))
        stdscr.attron(curses.A_BOLD)

        # Turning off attributes for title
        stdscr.attroff(curses.color_pair(2))
        stdscr.attroff(curses.A_BOLD)

        # Wait for next input
        prevk = k
        k = stdscr.getch()
        if (butt == ord('a')):
            k = butt
            butt = -1
        if (butt == ord('m')):
            k = butt
            butt = 0
        if (butt == ord('c')):
            k = butt
            butt = 0
        lapcounter += 1
        if (k != prevk): syslog.syslog("Liam-on-RPi: k change from " + str(prevk) + " to " + str(k))

def main():
    curses.wrapper(draw_menu)

if __name__ == "__main__":
    main()

